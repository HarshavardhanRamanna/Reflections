What happens when you initialize a repository? Why do you need to do it?

	It creates an empty repository. We can add files to keep track of them but it doesn't on its own until the first commit.
	Use git init

How is the staging area different from the working directory and the repository? What value do you think it offers?

	Staging area is a temporary space between the working directory and the repository. It enbales to bundle files together before commiting.
	This allows us to choose files that we need to commit together to denote a logical change.
	
How can you use the staging area to make sure you have one commit per logical change?

	use git diff to compare working directory with the staging area.
	use git diff --staged to compare staged area to the lastest commit in the repository.
	
What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	When experimenting to add a new feature but still wanting to fix bugs in the main version without the feature being implemented.
	
How do the diagrams help you visualize the branch structure?
	
	When we branch, we create a separate path to the existing master branch. The commits made on this branch is not reachable by other branches.
	This is because the commits are stored as a tree-structure, with the previous commit being the parent.
	To create a new branch and to checkout, we can use the command, git checkout -b new_branch_name

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	git merges the lines in a way by comparing both the branches prior to their branching. If a line was present in the original but not in either of 
	the braches, it removes it. It adds any line added by either branch which was not present before branching.